{"version":3,"sources":["utils/enums.ts","components/Header.tsx","components/Footer.tsx","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","hooks/useLocalStorage.ts","index.tsx"],"names":["Filter","ErrorType","StorageKey","Header","query","onChange","onSubmit","activeTodos","onToggle","className","type","classNames","active","length","onClick","data-cy","placeholder","value","e","target","Footer","numberOfTodos","hasCompletedTodos","onRemove","to","All","isActive","selected","Active","Completed","TodoItem","todo","onClose","useState","isEditMode","setIsEditMode","title","inputValue","setInputValue","id","completed","handleFormSubmit","trim","editInput","useCallback","inputElement","focus","editing","checked","htmlFor","onDoubleClick","onBlur","ref","onKeyUp","event","key","TodoList","React","memo","todos","map","App","initialValue","JSON","parse","localStorage","getItem","setValue","val","setItem","stringify","useLocalStorage","setTodos","useParams","filter","setQuery","isToggleActive","setIsToggleActive","visibleTodos","useMemo","some","preventDefault","newTodo","Date","currValue","todoId","ReactDOM","render","path","index","element","document","getElementById"],"mappings":"+NACYA,EAMAC,EAQAC,E,oGAdAF,K,UAAAA,E,gBAAAA,E,uBAAAA,M,cAMAC,K,UAAAA,E,YAAAA,E,gBAAAA,E,cAAAA,E,mBAAAA,M,cAQAC,K,eAAAA,M,iCCHCC,EAA0B,SAAC,GAMjC,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,YACAC,EACI,EADJA,SAEA,OACE,yBAAQC,UAAU,SAAlB,UACE,uCAEA,wBACEC,KAAK,SACLD,UAAWE,IAAW,sBAAuB,CAC3CC,OAA+B,IAAvBL,EAAYM,SAEtBC,QAASN,EALX,eAUA,sBAAMF,SAAUA,EAAhB,SACE,uBACEI,KAAK,OACLK,UAAQ,aACRN,UAAU,WACVO,YAAY,yBACZC,MAAOb,EACPC,SAAQ,+GAAE,SAACa,GAAD,OAAOb,EAASa,EAAEC,OAAOF,kBC7BhCG,EAA0B,SAAC,GAIjC,IAHLC,EAGI,EAHJA,cACAC,EAEI,EAFJA,kBACAC,EACI,EADJA,SAEA,OACE,yBAAQd,UAAU,SAAlB,UACE,sBAAMA,UAAU,aAAaM,UAAQ,eAArC,SACG,UACIM,EADc,IAAlBA,EAAA,8BAOH,qBAAIZ,UAAU,UAAd,UACE,6BACE,cAAC,IAAD,CACEe,GAAE,WAAMxB,EAAOyB,KACfhB,UAAW,gBAAGiB,EAAH,EAAGA,SAAH,OAAkBf,IAC3B,CACEgB,SAAUD,KAJhB,mBAYF,6BACE,cAAC,IAAD,CACEF,GAAE,WAAMxB,EAAO4B,QACfnB,UAAW,gBAAGiB,EAAH,EAAGA,SAAH,OAAkBf,IAC3B,CACEgB,SAAUD,KAJhB,sBAYF,6BACE,cAAC,IAAD,CACEF,GAAE,WAAMxB,EAAO6B,WACfpB,UAAW,gBAAGiB,EAAH,EAAGA,SAAH,OAAkBf,IAC3B,CACEgB,SAAUD,KAJhB,4BAaHJ,GACC,wBACEZ,KAAK,SACLD,UAAU,kBACVK,QAASS,EAHX,iCCzDKO,EAA4B,SAAC,GAKnC,IAJLC,EAII,EAJJA,KACAC,EAGI,EAHJA,QACAxB,EAEI,EAFJA,SACAH,EACI,EADJA,SAEA,EAAoC4B,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAoCF,mBAASF,EAAKK,OAAlD,mBAAOC,EAAP,KAAmBC,EAAnB,KACQF,EAAyBL,EAAzBK,MAAOG,EAAkBR,EAAlBQ,GAAIC,EAAcT,EAAdS,UAYbC,EAAmB,SAACxB,EAAgBb,GACpCiC,EAAWK,QACbrC,EAASgC,EAAYE,GACrBJ,EAAclB,KAEdkB,GAAc,GACdG,EAAclC,KAIZuC,EAAYC,uBAAY,SAACC,GACzBA,GACFA,EAAaC,UAEd,IAEH,OACE,qBACErC,UAAWE,IACT,CACE6B,YACAO,QAASb,IAJf,UAQE,sBAAKzB,UAAU,OAAf,UACE,uBACEC,KAAK,WACLD,UAAU,SACV8B,GAAG,cACHS,QAASR,EACTnC,SAAU,kBAAMG,EAAS+B,GAAKC,MAEhC,uBACES,QAAQ,SACRC,cAAe,kBAAMf,GAAc,IAFrC,SAIGC,IAEH,wBACE1B,KAAK,SACLD,UAAU,UACVM,UAAQ,aACRD,QAAS,kBAAMkB,EAAQO,IAJzB,kBASDL,GACC,sBACE5B,SAAU,kBAAMmC,GAAiB,EAAOL,IACxCe,OAAQ,kBAAMV,GAAiB,EAAOL,IAFxC,SAIE,uBACE1B,KAAK,OACLD,UAAU,OACV2C,IAAKT,EACL1B,MAAOoB,EACPhC,SAAU,SAACa,GAAD,OAAOoB,EAAcpB,EAAEC,OAAOF,QACxCoC,QAAS,SAACnC,GAAD,OApEjBoC,EAoE4CpC,EAnE5Cd,EAmE+C2B,EAAKK,WAjElC,WAAdkB,EAAMC,MACRpB,GAAc,GACdG,EAAclC,KANU,IAC1BkD,EACAlD,WCZSoD,EAA4BC,IAAMC,MAAK,YAK7C,IAJLC,EAII,EAJJA,MACA3B,EAGI,EAHJA,QACAxB,EAEI,EAFJA,SACAH,EACI,EADJA,SAEA,OACE,yBAASI,UAAU,OAAnB,SACE,oBAAIA,UAAU,YAAYM,UAAQ,WAAlC,SACG4C,EAAMC,KAAI,SAAA7B,GAAI,OACb,cAAC,EAAD,CAEEA,KAAMA,EACNC,QAASA,EACTxB,SAAUA,EACVH,SAAUA,GAJL0B,EAAKQ,cCRTsB,EAAgB,WAC3B,MCZ6B,SAAIN,EAAiBO,GAClD,MAA0B7B,oBAAS,WACjC,IACE,OAAO8B,KAAKC,MAAMC,aAAaC,QAAQX,IAAQ,KAAOO,EACtD,SACA,OAAOA,MAJX,mBAAO7C,EAAP,KAAckD,EAAd,KAaA,MAAO,CAAClD,EALK,SAACmD,GACZD,EAASC,GACTH,aAAaI,QAAQd,EAAKQ,KAAKO,UAAUF,MDCjBG,CAAwBrE,EAAWyD,MAAO,IAApE,mBAAOA,EAAP,KAAca,EAAd,KACA,EAAwBC,cAAhBC,cAAR,MAAiB,GAAjB,EACA,EAA0BzC,mBAAS,IAAnC,mBAAO7B,EAAP,KAAcuE,EAAd,KACA,EAA4C1C,oBAAS,GAArD,mBAAO2C,EAAP,KAAuBC,EAAvB,KAeA,IAAMC,EAAeC,mBAbrB,WACE,OAAQL,GACN,KAAK1E,EAAO6B,UACV,OAAO8B,EAAMe,QAAO,SAAC3C,GAAD,OAAgBA,EAAKS,aAE3C,KAAKxC,EAAO4B,OACV,OAAO+B,EAAMe,QAAO,SAAC3C,GAAD,OAAiBA,EAAKS,aAE5C,QACE,OAAOmB,KAI6B,CAACA,EAAOe,IAC5CnE,EAAW,OAAGoD,QAAH,IAAGA,OAAH,EAAGA,EAAOe,QAAO,SAAC3C,GAAD,OAAiBA,EAAKS,aAClDlB,EAAoBqC,EAAMqB,MAAK,SAACjD,GAAD,OAAgBA,EAAKS,aA+D1D,OACE,sBAAK/B,UAAU,UAAf,UACE,cAAC,EAAD,CACEL,MAAOA,EACPC,SAAUsE,EACVrE,SAlEe,SAACY,GAGpB,GAFAA,EAAE+D,iBAEG7E,EAAMsC,OAAX,CAIA,IAEMwC,EAAU,CACd3C,IAHU,IAAI4C,KAId/C,MAAOhC,EACPoC,WAAW,GAGbgC,EAAS,GAAD,mBAAKb,GAAL,CAAYuB,KAEpBP,EAAS,MAkDLpE,YAAaA,EACbC,SAhDiB,WACrBgE,EAASb,EAAMC,KACb,SAAC7B,GAAD,mBAAC,eAAqBA,GAAtB,IAA4BS,UAAWoC,QAEzCC,GAAkB,SAAAO,GAAS,OAAKA,UA+C3BzB,EAAM9C,QACP,qCACE,cAAC2C,EAAD,CACEG,MAAOmB,EACP9C,QAnCe,SAACqD,GACxBb,EAASb,EAAMe,QAAO,SAAC3C,GAAD,OAAgBA,EAAKQ,KAAO8C,OAmC1C7E,SAjDe,SAAC6E,EAAgB7C,GACxCgC,EAASb,EAAMC,KAAI,SAAC7B,GAClB,OAAIA,EAAKQ,KAAO8C,EACPtD,EAGF,2BACFA,GADL,IAEES,mBA0CInC,SA7BgB,SAACY,EAAeoE,GACxCb,EAASb,EAAMC,KAAI,SAAC7B,GAClB,OAAIA,EAAKQ,KAAO8C,EACPtD,EAGF,2BACFA,GADL,IAEEK,MAAOnB,EAAMyB,gBAwBX,cAAC,EAAD,CACErB,cAAa,OAAEd,QAAF,IAAEA,OAAF,EAAEA,EAAaM,OAC5BS,kBAAmBA,EACnBC,SAvCc,WACtBiD,EAASb,EAAMe,QAAO,SAAC3C,GAAD,OAAiBA,EAAKS,wBExEhD8C,IAASC,OACP,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,KAAK,IAAZ,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOF,KAAK,UAAUE,QAAS,cAAC,EAAD,aAIrCC,SAASC,eAAe,W","file":"static/js/main.ea49b3bc.chunk.js","sourcesContent":["/* eslint-disable no-shadow */\nexport enum Filter {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport enum ErrorType {\n  Get = 'get',\n  Post = 'post',\n  Delete = 'delete',\n  Patch = 'patch',\n  isEmpty = 'isEmpty',\n}\n\nexport enum StorageKey {\n  todos = 'todos',\n}\n","import React, { FormEvent } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  query: string;\n  onChange(value: string): void;\n  onSubmit(e: FormEvent<HTMLFormElement>): void;\n  activeTodos: Todo[];\n  onToggle(): void;\n};\n\nexport const Header: React.FC<Props> = ({\n  query,\n  onChange,\n  onSubmit,\n  activeTodos,\n  onToggle,\n}) => {\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <button\n        type=\"button\"\n        className={classNames('todoapp__toggle-all', {\n          active: activeTodos.length === 0,\n        })}\n        onClick={onToggle}\n      >\n        .\n      </button>\n\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          data-cy=\"createTodo\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={query}\n          onChange={(e) => onChange(e.target.value)}\n        />\n      </form>\n    </header>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport { Filter } from '../utils/enums';\n\ntype Props = {\n  numberOfTodos: number | undefined;\n  hasCompletedTodos: boolean;\n  onRemove(): void;\n};\n\nexport const Footer: React.FC<Props> = ({\n  numberOfTodos,\n  hasCompletedTodos,\n  onRemove,\n}) => {\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {numberOfTodos === 1 ? (\n          `${numberOfTodos} item left`\n        ) : (\n          `${numberOfTodos} items left`\n        )}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <NavLink\n            to={`/${Filter.All}`}\n            className={({ isActive }) => classNames(\n              {\n                selected: isActive,\n              },\n            )}\n          >\n            All\n          </NavLink>\n        </li>\n\n        <li>\n          <NavLink\n            to={`/${Filter.Active}`}\n            className={({ isActive }) => classNames(\n              {\n                selected: isActive,\n              },\n            )}\n          >\n            Active\n          </NavLink>\n        </li>\n\n        <li>\n          <NavLink\n            to={`/${Filter.Completed}`}\n            className={({ isActive }) => classNames(\n              {\n                selected: isActive,\n              },\n            )}\n          >\n            Completed\n          </NavLink>\n        </li>\n      </ul>\n\n      {hasCompletedTodos && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={onRemove}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n","import React, { KeyboardEvent, useCallback, useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  onClose(todoId: number): void;\n  onToggle(todoId: number, completed: boolean): void;\n  onChange(value: string, todoId: number): void\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  onClose,\n  onToggle,\n  onChange,\n}) => {\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [inputValue, setInputValue] = useState(todo.title);\n  const { title, id, completed } = todo;\n\n  const handleCancelEditing = (\n    event: KeyboardEvent<HTMLInputElement>,\n    query: string,\n  ) => {\n    if (event.key === 'Escape') {\n      setIsEditMode(false);\n      setInputValue(query);\n    }\n  };\n\n  const handleFormSubmit = (value: boolean, query: string) => {\n    if (inputValue.trim()) {\n      onChange(inputValue, id);\n      setIsEditMode(value);\n    } else {\n      setIsEditMode(false);\n      setInputValue(query);\n    }\n  };\n\n  const editInput = useCallback((inputElement: HTMLInputElement) => {\n    if (inputElement) {\n      inputElement.focus();\n    }\n  }, []);\n\n  return (\n    <li\n      className={classNames(\n        {\n          completed,\n          editing: isEditMode,\n        },\n      )}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id=\"toggle-view\"\n          checked={completed}\n          onChange={() => onToggle(id, !completed)}\n        />\n        <label\n          htmlFor=\"toggle\"\n          onDoubleClick={() => setIsEditMode(true)}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          data-cy=\"deleteTodo\"\n          onClick={() => onClose(id)}\n        >\n          .\n        </button>\n      </div>\n      {isEditMode && (\n        <form\n          onSubmit={() => handleFormSubmit(false, title)}\n          onBlur={() => handleFormSubmit(false, title)}\n        >\n          <input\n            type=\"text\"\n            className=\"edit\"\n            ref={editInput}\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyUp={(e) => handleCancelEditing(e, todo.title)}\n          />\n        </form>\n      )}\n    </li>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../types/Todo';\nimport { TodoItem } from './TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  onClose(todoId: number): void;\n  onToggle(todoId: number, completed: boolean): void;\n  onChange(value: string, todoId: number): void\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  onClose,\n  onToggle,\n  onChange,\n}) => {\n  return (\n    <section className=\"main\">\n      <ul className=\"todo-list\" data-cy=\"todoList\">\n        {todos.map(todo => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            onClose={onClose}\n            onToggle={onToggle}\n            onChange={onChange}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n});\n","import React, {\n  useState,\n  useMemo,\n  FormEvent,\n} from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Filter, StorageKey } from './utils/enums';\nimport { Todo } from './types/Todo';\nimport { Header } from './components/Header';\nimport { Footer } from './components/Footer';\nimport { TodoList } from './components/TodoList';\n\nimport { useLocalStorage } from './hooks/useLocalStorage';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useLocalStorage<Todo[]>(StorageKey.todos, []);\n  const { filter = '' } = useParams();\n  const [query, setQuery] = useState('');\n  const [isToggleActive, setIsToggleActive] = useState(true);\n\n  function filterTodos() {\n    switch (filter) {\n      case Filter.Completed:\n        return todos.filter((todo: Todo) => todo.completed);\n\n      case Filter.Active:\n        return todos.filter((todo: Todo) => !todo.completed);\n\n      default:\n        return todos;\n    }\n  }\n\n  const visibleTodos = useMemo(filterTodos, [todos, filter]);\n  const activeTodos = todos?.filter((todo: Todo) => !todo.completed);\n  const hasCompletedTodos = todos.some((todo: Todo) => todo.completed);\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!query.trim()) {\n      return;\n    }\n\n    const id = +new Date();\n\n    const newTodo = {\n      id,\n      title: query,\n      completed: false,\n    };\n\n    setTodos([...todos, newTodo]);\n\n    setQuery('');\n  };\n\n  const handleTogleAll = () => {\n    setTodos(todos.map(\n      (todo: Todo) => ({ ...todo, completed: isToggleActive }),\n    ));\n    setIsToggleActive(currValue => !currValue);\n  };\n\n  const handleToggleTodo = (todoId: number, completed: boolean) => {\n    setTodos(todos.map((todo: Todo) => {\n      if (todo.id !== todoId) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        completed,\n      };\n    }));\n  };\n\n  const handleRemoveTodo = (todoId: number) => {\n    setTodos(todos.filter((todo: Todo) => todo.id !== todoId));\n  };\n\n  const handleRemoveAll = () => {\n    setTodos(todos.filter((todo: Todo) => !todo.completed));\n  };\n\n  const handleTitleChange = (value: string, todoId: number) => {\n    setTodos(todos.map((todo: Todo) => {\n      if (todo.id !== todoId) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        title: value.trim(),\n      };\n    }));\n  };\n\n  return (\n    <div className=\"todoapp\">\n      <Header\n        query={query}\n        onChange={setQuery}\n        onSubmit={handleSubmit}\n        activeTodos={activeTodos}\n        onToggle={handleTogleAll}\n      />\n\n      {!!todos.length && (\n        <>\n          <TodoList\n            todos={visibleTodos}\n            onClose={handleRemoveTodo}\n            onToggle={handleToggleTodo}\n            onChange={handleTitleChange}\n          />\n\n          <Footer\n            numberOfTodos={activeTodos?.length}\n            hasCompletedTodos={hasCompletedTodos}\n            onRemove={handleRemoveAll}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { StorageKey } from '../utils/enums';\n\nexport const useLocalStorage = <T>(key: StorageKey, initialValue: T) => {\n  const [value, setValue] = useState(() => {\n    try {\n      return JSON.parse(localStorage.getItem(key) || '') || initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const save = (val: T) => {\n    setValue(val);\n    localStorage.setItem(key, JSON.stringify(val));\n  };\n\n  return [value, save];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router, Routes, Route } from 'react-router-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <Router>\n    <Routes>\n      <Route path=\"/\">\n        <Route index element={<App />} />\n        <Route path=\":filter\" element={<App />} />\n      </Route>\n    </Routes>\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}